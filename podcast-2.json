{"podcast_title": "Geeks Who Lead Podcast (formerly CTO Connection)", "episode_title": "Raji Subramanian - The three stages of value creation", "episode_image": "https://storage.buzzsprout.com/variants/kltw3mh05qdlqhd6bic6r4vxecdx/f6fd9b4ca4e468e7e11c8350463c894b252ee834d352e0a8d889b97ac83aedef.jpg", "episode_transcript": " Welcome to Geeks Who Lead, the global learning community for senior data and engineering leaders operating at scale. My name is Peter Bell. I'm founder and CTO at Geeks Who Lead and previously taught at Columbia Business School and ran engineering at General Assembly. The future of engineering leadership is here. It's just not evenly distributed. Every week we share interviews from senior data and engineering leaders sharing their hard-won wisdom and occasionally we mix it up with interviews with domain experts who can help us all to more effectively deliver business values from the engineering or data logs that we oversee. Hi there, my name is Peter Bell and today I am speaking with our Raji Subramanian, the CTO at Open Door Raji. Thanks so much for taking the time to talk today. Again, thank you for having me here, Peter. I'm very excited to be on this podcast. So maybe to provide the community with a little bit of context, what was your pathway to engineering leadership? Again, it's a very interesting question because each leader has a different pathway. As you called out, I'm currently the Chief Technology Officer at Open Door where I oversee both the technology and product development functions. And the team is a mixed team of engineers, researchers, data scientists, product managers. If you again step back and look at this space, as many of you know, Open Door is a trusted e-commerce platform for residential real estate that customers choose to buy, sell, and transition between our homes. So if you go back and look at the journey that got me here, I usually frame it along four different aspects. One could call it stages, but in many ways these stages are overlapped. And then there is a fifth one that can happen at pretty much at any point of time. So my journey to the job that I am in right now, and if I were to go down to the stages, there's four different parts to it. Any good CTO will say that they focus on four key things amongst many others. The first is architecture. That's the technology piece of the puzzle. Strategic, where you're creating value. The third is the execution, and the fourth is people. And for the most part, you spend about equal amounts of time across each of these four areas if you look at it over a year. And so let's break it down. And what took me to each of these, you know, to the point where it could be a CTO in each of these areas? On the technology end, this is something that I guide many of the engineers on our team here, as well as teams that I've worked on in the past. It is important to take the time to hone your skill and craft to the highest levels. Sometimes as an early engineer, we are in a rush to go up the chain and get into management. And I kind of say it is vital that as a technologist, you hone your skills. It is about solving complex problems. It's about solving large scale problems. It's also about solving interesting and groundbreaking problems. For example, in my career, I spent a fair amount of time as an engineer and grew up the ladder to be a principal engineer. And for a long period of time, even as a principal engineer and an engineering leader, I straddled both paths. So take your time. And it's also important to pick and choose the problems where you're able to hone these skills, whether it's building out the marketplace platform at Amazon, doing a lot of the groundbreaking work at AWS. Or in fact, even today, what I do with an open door where I'm deeply focused on designing our next-gen architecture. Step two is execution. If you go back and look at execution, it is about how do you get to the point where you can engineer for excellence? And this is where an organization starts coming in. You can be really good as an individual technical contributor. It's about how do you bring an organization around it is where execution comes in. And this is where operating mechanics play a very big role. For example, some of the things that we've been doing today at Open Door is about putting together a huge focus around how do you build a stable system? How do you make sure that the code that you deploy is at the highest quality and bar? And we spent an hour amongst my directs talking about it. But then you get the ability to do that if in your career, as you're going up the engineering management chain, you're not hands off, but you're also hands on in terms of the mechanics and working with the leaders in your organization to do that. The third piece is strategic. And I call this value creation and investing in innovation. Engineering is a means to an end. It's rarely the end. And as leaders, it's important to learn how you connect the dots from business to technology. And also how you actually build innovative products. And what set me up for success here was the model of single threaded leadership that was deployed at Amazon. I was one of Amazon's first single threaded leader where they brought in one leader to manage technology product operations along with business APIs. It's extremely valuable experience. Now, not every technologist might be a single threaded leader, but there are ways in which you can partner with other leaders within your organization to focus on connecting the dots. Rather than looking at the space technology out, it's important that we work backwards from customer value creation and business value creation. And the last prong is culture. Again, it's about hiring, empowering and developing the best. I was one of the early barraisers at Amazon. And that plays a big role. We are about actually having a, if you go back and look at open doors hiring process, the bar is extremely high as well. And one of the cultures that we are kind of trying to bring in within the organization is how can the technology organization be innovative and create value for our customers? The fifth piece that I talked about can happen at any stage. It's about how can you actually wear all of these hats at the same point of time, irrespective of where you are in your career by being a founder? Absolutely. So that's great because of course, remind me that the company that you founded, which actually got acquired by open door. The company that I co-founded was a company called Pro.com. It was in the, we were building the technology platform for home improvement. And this is kind of where I would like to kind of like give huge kudos to open door because it's been very thoughtful in terms of the approach it looked at the companies that it acquired. It is always following on the principle of how do we start and end with the customer? And in fact, the acquisition happened because the vision of both companies were anchored around the home. So one question I have is, you've got, and I think it ties in perhaps with a single threaded leadership. You wear a number of hats, specifically product technology, and it sounds like data also rolls up to you. Do you see that that is a trend that we're going to see more of in terms of having a CPTDO versus having separate executive roles? I think it's a trend that's kind of catching up. I would say, and the reason I use the word kind of catching up is if you step back and look at what is at the root of this particular trend. I think most companies today have acknowledged the value of working back, whether it's a customer or the business working back. And so if you start from there, there are different org designs that one can go after. And one of the popular approaches is programs and platforms. The reason why I kind of bring that up is single threaded leadership overall is fairly complex. How do you find the single threaded leader who can wear all of these hats? And it's very hard to find these unicorns. But if you step back and look at it from the perspective of what is it that these leaders do, if you go back and look at any organization, you have a lot of programs that teams are running as well as platforms. So what's the distinction? If you're looking at programs, typically you're working back from a business outcome or a customer value proposition that you're creating. So there is an outcome that you're working after. But if you're building a platform, the outcomes that you're looking and you're trying to work back from have a much more longer term value creation perspective. Or you're looking at an architectural piece that kind of comes in, building out something foundational, building out something innovative, building out something game changing. So now if you look at it from this perspective, the trend that I do see happening is the product function being sitting closer to either the business unit or the CTO's organization, depending on where the outcome is aligned the most. So I do see that trend happening. Again, it is also a question of maturity and scale. Smaller companies are functional. But again, some very large companies are also functional. But when these companies, when smaller companies at some point of time reach a certain scale, again, the functionality might kind of break down along business lines or technology lines. But if you look at larger companies, it's a question of how do you actually align to business units or key platform and foundational innovative outcomes. As companies shift to that sort of a direction, I do see product lines either aligning with either business presidents or the CTO, while the technology function takes its own journey. That makes a lot of sense. Now, I know something you talk about a lot is this idea of three stages of value creation. Maybe you could share a little bit about how and why you came up with that framework. Yeah, absolutely. And this is something that this is a playbook that I've used in many places. It's a playbook that we're using extensively here with an open door as well. The three stages, as I call it, are invent, implement and optimize. And again, if you look at invent, it's about getting new ideas. It's about getting those bold bets out there. Implement is about building the production lines, or I call it the foundational platforms. And optimize is leveraging everything that you've built, the technology as well as processes to continuously drive business improvement, either of customer value or whatever business improvement you want to generate. And so if you go back and look at this playbook, it kind of came in from my experience, I would say, at Amazon. Again, I was a very early member, also a pioneering member at Amazon Marketplace and Web Services, where I had a ringside view of how you take a concept, take an idea from a concept to building a very large scale business. You also see this happening as a first act, second act and third act. And I've applied many of these learnings, both in companies that have co-founded as well as companies that have led large organizations. If you go back and look at each of these three things, at its core, it is about how do you make sure that an organization, especially at scale, has the right balance across each of these three phases between implement, implement, invent, implement and optimize. That's great. So I'd love to, and I would love that you have this differentiated model because what I see often is people will come maybe from one background, maybe somebody's coming in from Google, somebody's coming in from an early stage startup. They've been in very different environments. And then when they have conversations, their assumptions are so different that they're optimizing for the wrong thing. So, for example, if I'm dealing with a product at scale and I'm like, wait, let's see how we can fail fast and minimize our cycle time. I mean, it's not a bad thing to learn, but you probably care more about product stability if a few seconds of downtime is going to cost you a huge amount of money. So I think once you have some kind of framework like this, it makes it much easier to have those discussions saying, okay, well, what are we trying to optimize for here? What I'd love to do is dig into each one of those areas and maybe ask a little more. So in the invent phase, you've got a team optimizing for invention, learning quickly. How does that impact hiring? How does that impact the processes you use to make such a team or an org successful? The first thing that I'll kind of share applies to all three stages, but it's also very important in the invent or the innovation stage. The ideal person that you hire is the one who aligns closely to the operating principles of the company, as well as with its mission and mission. Not having someone who's aligned with both of these usually does not land at a great place. And then, of course, there's a lot of table stakes. So the reason I kind of bring this up is operating principle or company value alignment, vision and mission alignment, and the table stakes and craft and ownership are required for all three stages. But then if you focus, what would you look for in a person you're bringing in on the invent stage? I look at along two, I try to answer this along two different axes. The two axes that I have, the rubric I use, the first axis, I call it build for scale. The second is schedule speed. The build for scale is really going ahead and building those large scale, longer ranging platforms and products that have to stand the test of time. On the other hand, in schedule speed, you have to be scrappy. You have to move fast. You have to make mistakes. But at the same time, at the same point of time, you have to deploy a lot of different creative solutions to crack the code. So if you go back and look at it in the invent phase, you're looking for someone who can schedule speed. But at the same point of time, there's a certain type of speed you're looking for, which is the ability, affinity and the interest in cracking the code in starting and ending with a customer very, very rapidly. It's literally the ability to crack the code and move fast. Now, at the same point of time, when you're looking at implement, the answer is simple. You're looking for someone who can build for scale. Now, the optimizer is tricky because you're actually looking for someone who kind of has both. The reason is that they've built for scale and they've spent maybe a year building for scale, but they're open and willing to take that hat off once you reach the optimized stage and then make fast improvements. And over time, you can actually train an organization once you provide them a framework to start thinking about these different phases. Yeah. So one thing I'd love to understand, do you typically see a particular engineer being hired primarily for one of those roles or do you try to rotate individual contributors amongst each one of those kind of stages? I think the answer is kind of both. A lot of it is, and the reason I kind of say both is you'll find that there are specific engineers who come in and they really want to focus on one or the other. And a company of this size that we have, for the most part, most large companies have enough of both going on, and you can make sure that they are aligned with where their strengths are. On the other hand, you will also find that there are people who are actually, you need specialized skills, for example. A very, very strong back end engineer who's worked 10 plus years in building robust back ends. One has an affinity to build for scale and also might have an interest in building for scale and is also bringing in the experience and patterns that are needed for build for scale. And they are hardcore technologists. But on the other hand, you also have engineers who want to wear multiple hats and really want to continuously work back from the customer where you kind of align. And so the reason I kind of say both is you hire all kinds of folks. You hire people who want to build for scale. You hire people who want to schedule speed. And then you deploy them where their strengths and interests are aligned. That makes sense. Now, when you think about this, especially when you get to a certain scale, all of these things are often going on at the same time, right? So beyond a certain scale, you might have a product line, but then you're working on product line extensions or completely different product lines. How do you think about building innovation and investment portfolio within a technology team to make sure that you're continually investing in those disruptive innovations, particularly? Actually, it is a top of mind question. If you go back and look at most companies at scale, this is the top of mind question. And I think the answer varies for every company, depending on the stage they are in. It also kind of varies depending on what is needed for the success of the company in the next stage. And if you kind of break it down, it kind of comes down to this. If you're looking at it from a rubric or a framework, the invent, implement and optimize framework can be applied to pretty much companies of any size and scale. The answer for where you make the investment, your investment thesis and strategy might be different for each. Let's take the framework and apply it to a startup. That's easy. For the most part, you're inventing. As you go to the mid stage, you're moving from inventing to inventing and implementing because you've come out of the product market fit stage to where you're closing your flywheel and you're building for scale. It is about throwing the fuel on the fire to scale. While a late stage company, you're doing both things. You're implementing as well as you're optimizing. And there's a reason why I kind of say this. At this point of time, all of these companies are in their first act. Our first key lines of business that they're trying to reach its maximum potential or the maximum enterprise value associated with it. So at the late stage, you're inventing and optimizing. But once you reach maturity is where this question becomes tricky. And the reason kind of like and I call that out is because at that point in time, the question is, do you continue throwing fuel on the fire on your most mature line of business or do you start innovating? And I would say there are a couple of pieces of the puzzle that kind of play a role in this. Just how much more white space do you have and how secure is your position? Are you adaptable to volatility? Do you still have a lot of white space to power? And most mature companies, by the time you're mature, will say that, yes, there is room. But then, yes, we need to start building optionality. And that is kind of when I would say you need to start going back and looking at the second act. And I call it building optionality, either in your existing business lines or new business lines. Every innovation takes three to five years. So if you are a mature company, you need to go back and look at the invent piece and start putting some of your chips there, whether you put 10, 20, 30 percent. It's dependent on the company. And these are conscious calls that you make. But on the other hand, I will kind of share that as you're innovating, you have to manage the cost of innovation and you have to be able to fail fast. If you run 10 to hundreds of petri dishes, you'll find that some of them become successful. So as a company, you need to assess how many bets you want to run at any point in time. And then you deploy that many chips towards innovation. It is also dependent on how solid you implement and optimize already is. For example, if your core business has already reached the stage of great, then the business is going to run by itself. So these are tradeoffs that you make. And then you start investing ahead, making sure that you have the right framework for innovation. And the reason I say the right framework for innovation is you can't go about saying that I'm going to put my chip on one big area and deploy a lot of money there. Because what happens is you're not going to fail fast because the cost of failure is high. So you have to figure out a way to create the right number of petri dishes and start innovating. But I would say if a company is mature, innovation is no longer nice to have. It's kind of become table stakes. It is a necessity for survival today. And companies that successfully deploy the innovation playbook really thrive. And others, one has seen more often than not, start becoming irrelevant. So I'd love to get super tactical about this. So imagine you're a mature business and you've decided to bet some amount of chips on these disruptive or Horizon 3 innovations. Substantially, it could be completely new product lines, whatever it might be. What might a team look like? What might be the size and composition of maybe the team for any given bet? Is this like a two-pizza team? What does that look like? I mean, it resonated when you said the two-pizza team, because in fact, one of the most successful companies, the second and third act, amongst many others, was Amazon. And one of the concepts that kind of came up was a team that you start off with a team that can be fed on two pizzas. And so it's somewhere in the single digits. You kind of hit the 10% mark. The configuration of these teams, if you go back and look at any team that needs to innovate, you need a few. You need a small. You need a core group of what I call as engineering product and design. So that is one part of this. You also need folks who can take this to market, for example, and run some of your operations. So to answer your question, yes, it's closer to a team that can be fed on two pizzas. Now, whether that's 10 to 12 typically is where you kind of could start off by noodling on a product. And after that, as with any startup, the team earns its way milestone by milestone by milestone. You know, you have early product market fit, and then you start deploying. You run multiple experiments, and then it keeps growing. So I look at it at that point of time like you would invest in any startup. From that size, it keeps growing, depending on how successful the product is. But if it fails, you move them to another petri dish. And it feels like that one of the challenges here is having really clear metrics for the milestones and for the definition of success to make sure that you don't just otherwise. I think it's so many big companies, it's easier to throw good money after bad because nobody wants to admit that they've failed. Absolutely. And those metrics are super, super critical, especially when you are looking at those initial board bets. And I can kind of give like two different examples and both equally strong. If you take the case of a startup, typically those bets are happening at the seed stage. Think of it as a seed stage company. A seed stage company runs with its bets for about 12 to 18 months and then goes in for a series A. At that point in time, the proof points are pretty obvious. If there are no proof points, and the proof points are typically along the lines of what customer value did you create and the signals that any venture investor is looking for or any investors looking at is do customers like this product? Is there a core value and are customers willing to pay for the product? And do you have a way to drive demand into your product? It does not necessarily mean you've proven everything out. And so you have a clear set of metrics. And the clear set of metrics that really are relevant at this point of time is do you have a monetizable product that customers love? And it could be two customers who say, I love your product, or 10 or 200. But it has to be strong signals that you are creating monetizable customer value. Now, there's one thing that you kind of called out in passing that I just want to kind of double click on, which is this idea of having people on that team who can take it to market. Because I've seen some companies, it's like, oh, great, we've got an R&D wing, we write all this software. And then I guess we should ask the sales team to sell it and the marketing team to promote it. And of course, they can get no attention at all, because it's like, oh, yeah, well, I mean, if we succeed, maybe we'll get another million dollars in revenues this year. And it's just not going to move the needle. Have you found that it is critical to provide those resources to these teams? What kind of scale and size do that usually look like in that kind of seed through series A stage using the venture analogy? Yeah, I think it's a especially if you have a large, if you're a large company with a marketing department, one can always make a call whether this is a dedicated resource or a part time resource. Those are tradeoffs you can make. But what's crucial here, a couple of things. It's a three pronged rubric. The first is applying the principle of working back from the customer. For example, at Amazon, famously, you wrote the press release before you started building the product. So that's a great example of working back from the customer. And so I'd say that is one aspect of that rubric where you have to work back from the customer. And the reason I kind of bring that up is now I think it's pretty logical to say, well, if you're writing a press release, you're taking a message out to the market. So who are all involved in that press release in terms of actually articulating it? Right. So at that point in time, you do bring that piece of the puzzle to the table to see how you're going to take this to market to see if there's resonance. It need not be a full time person. It can even be a part time person. But the point is they're wearing that coat cracking hat. The second part of it that you're trying to kind of prove out during the early stage is instead in the really seed stage or in the really the first stage of the product, you're looking for customers resonating with a product or customers loving the product. You don't necessarily need to figure out your channel story, but you need to at least have an opinion on your channel story and then test the waters in the same way that you're testing the value proposition to test that there are channels that you can take it out to the market. You know, otherwise, the only channel you're deploying is friends and family. So the answer to your question is, yes, it is important, mainly because in the same way that you're actually trying to figure out what the customer value is, you're also figuring out how to distribute this value to the customers. And so you need to have an opinion. Yes, you're putzing around with it. You're playing around with it. You're cracking the code around it with it. But you're also forming an opinion on which channels you want to start distributing this product around. That makes sense. Another challenge I see a lot of people run into is decoupling project success from career development. So if you're not careful, what can happen is people who are on the successful projects, they grow and their career blows up within the company. And others that happen to be working on a project that succeeds in finding that there is indeed no product market fit for that offering, it's much harder to grow within the company and to get promoted if you're on failing products. The challenge, of course, is that if you do that, then nobody's going to want to take a risk on anything that's innovative because they're probably just going to lose two years of career progression. How do you think about creating a culture that supports success based upon learning rather than necessarily based upon creating value or for succeeding with a project? This is a very interesting question and a very important question for companies to consider. So if you go back and look at the entire question, we talked about career progression, we talked about success. There is one word which is the superpower in all of this that we've not talked about, which is companies that respect failure and value failure actually also nurture and provide the environment for the most success. Because you cannot innovation and failure are two sides to the same coin. Because if you don't fail, it just means that the path to this is so well known that it's no longer innovation. It's a straight line path. It is a path of deduction. You can go from step A to step B to step C. It's not like you're cracking a code. So the first part is one of the values that the company needs to respect a lot is think big, think bold, or be bold and value failure. Now, it does not mean that you have to value failure to the point that you do dumb things all the time. You know, it's not that failure means that you should never succeed. That's the key piece of this puzzle. What it means is that the path to success is littered with failure. And then the question is, how are you going to value the people who have gone through the journey and who have failed and what learnings did they bring back? So you have to reward learnings that have been brought back into the organization. You have to learn. You have to reward the value that has been created. The value can come in in terms of business metrics. It's both. Because if you don't, then what happens is that the size of your aspirations and dreams are always going to be, are always going to have a limit. So you're going to, as a company, pay the price somewhere if you don't create that environment. That's great. And then I guess a final question. Unfortunately, we're almost up on time. I was speaking with Prith Banerjee, the CTO of Ansys. He's written a book called The Innovation Factory. And one of the things he talks about a lot for these kind of Horizon 3 innovations is the whole build versus buy decision, right? Because one approach is you build your own two pizza teams. And another is you engage with academia or you engage with startups and you kind of make strategic investments and eventually acquisitions. How do you think about balancing a portfolio between dealing with academia, dealing with startups and nurturing your projects internally? It's interesting. So there's a, I kind of frame this as there's a build versus buy. And then there's a third piece, which is much more strategic, long term investments or inventions that you're working with academia. And we'll come to that towards the end. So I actually think about this along two different lines. I feel that a mature, large scale company has to use a combination of build and buy. Here's the reason why. Buy, if you're doing the right buy, is acceleration. It's velocity with which you can introduce innovation and every company should be open to the buy option. You cannot close the option to buy out, which means that in many ways you're capping the type of innovations you can do to the people who are within the company. So I would say a mature company needs to look at buy. Here's the thing about build. At some point of time, you have to build the muscle memory for innovation within your company. If you don't do the build, then what happens is that you're always implementing and optimizing. You've not built the muscle memory for invention. And that is a core DNA that each company needs to have. So you have to look at build as an option. The third piece that you talked about with academia is that usually when you bring in, for example, there are many examples at Amazon that, you know, there were a lot of partnerships that kind of happened and of high value. But if you go back and look at the spectrum of academia, it kind of comes down to a company willing to create that groundbreaking IP, willing to spend the time and the resources to go ahead and make that happen. But if you are also having the knack to identify the right technology and creating the engine to commercial technology, to be able to commercialize the technology, then you can take that path and you do it well. The risk to rewards ratio on that is huge, which means you're not just you're literally creating the future. You're seeing the future and you're inventing the future at that point in time. And matured companies that can do that come up with game changing stuff. Raji, unfortunately we're out of time, but thank you so much for taking the time to share your wisdom and experiences. Great to be here. If you'd like to learn more about Geeks Who Lead, go to geekswholead.com. Sign up for our weekly newsletter to get regular access to other great interviews and then see whether you might qualify to join one of our exclusive free executive communities."}